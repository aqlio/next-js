===== .eslintrc.json =====
{
  "extends": "next/core-web-vitals"
}


===== .gitignore =====
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts


===== README.md =====
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.


===== components.json =====
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}

===== next.config.mjs =====
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;


===== package.json =====
{
  "name": "academy",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-dialog": "^1.1.1",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-slot": "^1.1.0",
    "@reduxjs/toolkit": "^2.2.7",
    "@shadcn/ui": "^0.0.4",
    "axios": "^1.7.7",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.1",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "lucide-react": "^0.429.0",
    "next": "14.2.6",
    "react": "^18",
    "react-dom": "^18",
    "react-redux": "^9.1.2",
    "reflect-metadata": "^0.2.2",
    "shadcn-ui": "^0.8.0",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "14.2.6",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}


===== postcss.config.mjs =====
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;


===== public/next.svg =====
[Binary file or inaccessible]


===== public/vercel.svg =====
[Binary file or inaccessible]


===== src/Services/ClassService.ts =====
// src/lib/services/ClassService.ts

import { API_PATHS } from "@/constants/apiConstants";
import { IClass } from "@/interfaces/IClass";
import axios, { AxiosInstance } from "axios";
import { plainToInstance } from "class-transformer";
import { Class } from "@/models/Class";

class ClassService {
  private axiosInstance: AxiosInstance;

  constructor() {
    this.axiosInstance = axios.create({
      baseURL: API_PATHS.CLASS.GET_CLASSES, // Adjust the API path accordingly
      headers: {
        "Content-Type": "application/json",
      },
    });
  }

  /**
   * Fetch all classes with optional filters.
   * @param token 
   * @param params 
   * @returns IClass[]
   */
  async getClasses(token: string, params?: Record<string, any>): Promise<IClass[]> {
    const response = await this.axiosInstance.get<IClass[]>(API_PATHS.CLASS.GET_CLASSES, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
      params,
    });
    return response.data.map(cls => plainToInstance(Class, cls, { excludeExtraneousValues: true }));
  }

  /**
   * Create a new class.
   * @param token 
   * @param data 
   * @returns IClass
   */
  async createClass(token: string, data: Partial<IClass>): Promise<IClass> {
    const response = await this.axiosInstance.post<IClass>(API_PATHS.CLASS.CREATE_CLASS, data, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return plainToInstance(Class, response.data, { excludeExtraneousValues: true });
  }

  /**
   * Update a class.
   * @param token 
   * @param classId 
   * @param data 
   * @returns IClass
   */
  async updateClass(token: string, classId: string, data: Partial<IClass>): Promise<IClass> {
    const response = await this.axiosInstance.put<IClass>(`${API_PATHS.CLASS.UPDATE_CLASS}/${classId}`, data, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return plainToInstance(Class, response.data, { excludeExtraneousValues: true });
  }

  /**
   * Delete a class.
   * @param token 
   * @param classId 
   */
  async deleteClass(token: string, classId: string): Promise<void> {
    await this.axiosInstance.delete(`${API_PATHS.CLASS.DELETE_CLASS}/${classId}`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
  }
}

export default ClassService;


===== src/Services/LectureService.ts =====
// src/lib/services/LectureService.ts

import { API_PATHS } from "@/constants/apiConstants";
import { ILecture } from "@/interfaces/ILecture";
import axios, { AxiosInstance } from "axios";
import { plainToInstance } from "class-transformer";
import { Lecture } from "@/models/Lecture";

class LectureService {
  private axiosInstance: AxiosInstance;

  constructor() {
    this.axiosInstance = axios.create({
      baseURL: API_PATHS.LECTURE.GET_LECTURES, // Adjust the API path accordingly
      headers: {
        "Content-Type": "application/json",
      },
    });
  }

  /**
   * Fetch all lectures with optional filters.
   * @param token 
   * @param params 
   * @returns ILecture[]
   */
  async getLectures(token: string, params?: Record<string, any>): Promise<ILecture[]> {
    const response = await this.axiosInstance.get<ILecture[]>(API_PATHS.LECTURE.GET_LECTURES, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
      params,
    });
    return response.data.map(lecture => plainToInstance(Lecture, lecture, { excludeExtraneousValues: true }));
  }

  /**
   * Create a new lecture.
   * @param token 
   * @param data 
   * @returns ILecture
   */
  async createLecture(token: string, data: Partial<ILecture>): Promise<ILecture> {
    const response = await this.axiosInstance.post<ILecture>(API_PATHS.LECTURE.CREATE_LECTURE, data, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return plainToInstance(Lecture, response.data, { excludeExtraneousValues: true });
  }

  /**
   * Update a lecture.
   * @param token 
   * @param lectureId 
   * @param data 
   * @returns ILecture
   */
  async updateLecture(token: string, lectureId: string, data: Partial<ILecture>): Promise<ILecture> {
    const response = await this.axiosInstance.put<ILecture>(`${API_PATHS.LECTURE.UPDATE_LECTURE}/${lectureId}`, data, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return plainToInstance(Lecture, response.data, { excludeExtraneousValues: true });
  }

  /**
   * Delete a lecture.
   * @param token 
   * @param lectureId 
   */
  async deleteLecture(token: string, lectureId: string): Promise<void> {
    await this.axiosInstance.delete(`${API_PATHS.LECTURE.DELETE_LECTURE}/${lectureId}`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
  }
}

export default LectureService;


===== src/app/(auth-page)/layout.tsx =====
"use client";


import { useAuth } from '@/store/hooks';
import { useRouter } from 'next/navigation';
import { useEffect } from 'react';
import LoggedOutHeader from "@/components/Headers/LoggedOutHeader";

export default function AuthLayout({
    children,
}: Readonly<{
    children: React.ReactNode;
}>) {
    const { isLoggedIn } = useAuth();
    const router = useRouter();

    useEffect(() => {
        if (isLoggedIn) {
            router.push('/home'); // or any default logged-in page
        }
    }, [isLoggedIn, router]);

    if (isLoggedIn) {
        return null; // or a loading spinner
    }

    return (
        <div>
            <LoggedOutHeader />
            {children}
        </div>
    );
}

===== src/app/(auth-page)/login/page.tsx =====
"use client";

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { loginUser } from '@/store/authSlice';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { useAppDispatch, useAppSelector } from '@/store/hooks';






export default function Login() {
	
	
	
	const router = useRouter();
	const [email, setEmail] = useState('');
	const [password, setPassword] = useState('');

	const dispatch = useAppDispatch();
	const { isLoading, error } = useAppSelector((state) => state.auth);







	const handleLogin = async (e: React.FormEvent) => {
		e.preventDefault();
		const resultAction = await dispatch(loginUser({ email, password }));
		if (loginUser.fulfilled.match(resultAction)) {
			router.push('/home');
		}
	};






	return (
		<div className="flex items-center justify-center min-h-screen bg-gray-100">
			<div className="w-full max-w-md p-6 bg-white rounded shadow-md">
				<h2 className="text-2xl font-bold text-center mb-6">Teacher Login</h2>
				{error && <p className="text-red-500 text-center mb-4">{error}</p>}
				<form onSubmit={handleLogin} className="space-y-4">
					<div className="space-y-2">
						<label htmlFor="email" className="text-sm font-medium">Email</label>
						<Input
							id="email"
							type="email"
							placeholder="Enter your email"
							value={email}
							onChange={(e) => setEmail(e.target.value)}
							required
						/>
					</div>
					<div className="space-y-2">
						<label htmlFor="password" className="text-sm font-medium">Password</label>
						<Input
							id="password"
							type="password"
							placeholder="Enter your password"
							value={password}
							onChange={(e) => setPassword(e.target.value)}
							required
						/>
					</div>
					<Button type="submit" className="w-full" disabled={isLoading}>
						{isLoading ? 'Logging in...' : 'Login'}
					</Button>
				</form>
			</div>
		</div>
	);
}

===== src/app/(auth-page)/signup/page.tsx =====
"use client";

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';

export default function Signup() {
  const router = useRouter();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleLogin = (e: React.FormEvent) => {
    e.preventDefault();
    console.log('Login attempted with:', { email, password });
    router.push('/home');
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      
      
      
      
		<div className="w-full max-w-md p-6 bg-white rounded shadow-md">

			
			<h2 className="text-2xl font-bold text-center mb-6">Teacher Signup</h2>




			<form onSubmit={handleLogin} className="space-y-4">


				<div className="space-y-2">
					<label htmlFor="email" className="text-sm font-medium">Email</label>
					<Input id="email" type="email" placeholder="Enter your email" value={email}
						onChange={(e) => setEmail(e.target.value)} required />
				</div>




				<div className="space-y-2">
					<label htmlFor="password" className="text-sm font-medium">Password</label>
					<Input id="password" type="password" placeholder="Enter your password" value={password}
						onChange={(e) => setPassword(e.target.value)} required />
				</div>




				<Button type="submit" className="w-full">Sign up</Button>

			</form>
		</div>
    </div>
  );
}

===== src/app/(logged-in)/add-class/page.tsx =====
"use client";

import { useState } from 'react'
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "@/components/ui/card";

// Mock data for initial classes
const initialClasses = [
    { id: 1, name: 'Mathematics 101', schedule: 'Mon, Wed, Fri 9:00 AM', capacity: 20 },
    { id: 2, name: 'English Literature', schedule: 'Tue, Thu 2:00 PM', capacity: 15 },
    { id: 3, name: 'Physics Advanced', schedule: 'Mon, Thu 11:00 AM', capacity: 18 },
] 

export default function Component() {
    const [classes, setClasses] = useState(initialClasses)
    const [newClass, setNewClass] = useState({ name: '', schedule: '', capacity: '' })
    const [editingClass, setEditingClass] = useState(null)

    const handleInputChange = (e) => {
        const { name, value } = e.target
        if (editingClass) {
            setEditingClass({ ...editingClass, [name]: value })
        } else {
            setNewClass({ ...newClass, [name]: value })
        }
    }

    const handleSubmit = (e) => {
        e.preventDefault()
        if (editingClass) {
            setClasses(classes.map(c => c.id === editingClass.id ? editingClass : c))
            setEditingClass(null)
        } else {
            const id = classes.length > 0 ? Math.max(...classes.map(c => c.id)) + 1 : 1
            setClasses([...classes, { ...newClass, id }])
            setNewClass({ name: '', schedule: '', capacity: '' })
        }
    }

    const handleEdit = (classItem) => {
        setEditingClass(classItem)
        setNewClass({ name: '', schedule: '', capacity: '' })
    }

    const handleDelete = (id) => {
        setClasses(classes.filter(c => c.id !== id))
    }

    const handleCancelEdit = () => {
        setEditingClass(null)
        setNewClass({ name: '', schedule: '', capacity: '' })
    }

    return (
        <div className="w-full max-w-2xl container mx-auto px-4 py-8">
            <h1 className="text-2xl font-bold mb-6">Class Management</h1>
            <div className="grid gap-6">
                <Card>
                    <CardHeader>
                        <CardTitle>{editingClass ? 'Edit Class' : 'Create New Class'}</CardTitle>
                        <CardDescription>
                            {editingClass ? 'Modify the details of the existing class.' : 'Add a new class to your tuition academy.'}
                        </CardDescription>
                    </CardHeader>
                    <form onSubmit={handleSubmit}>
                        <CardContent className="space-y-4">
                            <div className="space-y-2">
                                <Label htmlFor="name">Class Name</Label>
                                <Input
                                    id="name"
                                    name="name"
                                    value={editingClass ? editingClass.name : newClass.name}
                                    onChange={handleInputChange}
                                    placeholder="e.g., Mathematics 101"
                                    required
                                />
                            </div>
                            <div className="space-y-2">
                                <Label htmlFor="schedule">Schedule</Label>
                                <Input
                                    id="schedule"
                                    name="schedule"
                                    value={editingClass ? editingClass.schedule : newClass.schedule}
                                    onChange={handleInputChange}
                                    placeholder="e.g., Mon, Wed, Fri 9:00 AM"
                                    required
                                />
                            </div>
                            <div className="space-y-2">
                                <Label htmlFor="capacity">Capacity</Label>
                                <Input
                                    id="capacity"
                                    name="capacity"
                                    type="number"
                                    value={editingClass ? editingClass.capacity : newClass.capacity}
                                    onChange={handleInputChange}
                                    placeholder="e.g., 20"
                                    required
                                />
                            </div>
                        </CardContent>
                        <CardFooter className="flex justify-between">
                            <Button type="submit">{editingClass ? 'Update Class' : 'Create Class'}</Button>
                            {editingClass && (
                                <Button type="button" variant="outline" onClick={handleCancelEdit}>
                                    Cancel Edit
                                </Button>
                            )}
                        </CardFooter>
                    </form>
                </Card>
            </div>
        </div>
    )
}

===== src/app/(logged-in)/add-student/page.tsx =====
"use client";

import { useState } from 'react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "@/components/ui/card"

export default function AddStudent() {
    const [formData, setFormData] = useState({
        firstName: '',
        lastName: '',
        age: '',
        grade: '',
        email: '',
        phone: '',
        address: ''
    })

    const handleChange = (e) => {
        const { name, value } = e.target
        setFormData(prevData => ({
            ...prevData,
            [name]: value
        }))
    }

    const handleSubmit = (e) => {
        e.preventDefault()
        // Here you would typically send the data to your backend
        console.log('Form submitted:', formData)
        // Reset form after submission
        setFormData({
            firstName: '',
            lastName: '',
            age: '',
            grade: '',
            email: '',
            phone: '',
            address: ''
        })
    }

    return (
        <Card className="w-full max-w-2xl mx-auto mt-10">





            <CardHeader>
                <CardTitle>Add New Student</CardTitle>
                <CardDescription>Enter the details of the new student for your tuition academy.</CardDescription>
            </CardHeader>
            
            
            
            
            
            <form onSubmit={handleSubmit}>
                <CardContent className="space-y-4">
                    
                    
                    
                    
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">

                        <div className="space-y-2">
                            <Label htmlFor="firstName">First Name</Label>
                            <Input id="firstName" name="firstName" placeholder="John" value={formData.firstName}
                                onChange={handleChange} required />
                        </div>
                        <div className="space-y-2">
                            <Label htmlFor="lastName">Last Name</Label>
                            <Input id="lastName" name="lastName" placeholder="Doe" value={formData.lastName}
                                onChange={handleChange} required />
                        </div>


                    </div>







                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">


                        <div className="space-y-2">
                            <Label htmlFor="age">Age</Label>
                            <Input id="age" name="age" type="number" placeholder="15" value={formData.age}
                                onChange={handleChange} required />
                        </div>




                        <div className="space-y-2">
                            <Label htmlFor="grade">Grade</Label>
                            <Select name="grade" onValueChange={(value) => handleChange({ target: { name: 'grade', value } })}>
                                <SelectTrigger>
                                    <SelectValue placeholder="Select Grade" />
                                </SelectTrigger>
                                <SelectContent>
                                    {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map((grade) => (
                                        <SelectItem key={grade} value={grade.toString()}>{grade}</SelectItem>
                                    ))}
                                </SelectContent>
                            </Select>
                        </div>


                    </div>





                    <div className="space-y-2">
                        <Label htmlFor="email">Email</Label>
                        <Input id="email" name="email" type="email" placeholder="john.doe@example.com" value={formData.email}
                            onChange={handleChange} required />
                    </div>






                    <div className="space-y-2">
                        <Label htmlFor="phone">Phone Number</Label>
                        <Input id="phone" name="phone" type="tel" placeholder="123-456-7890" value={formData.phone}
                            onChange={handleChange} required />
                    </div>






                    <div className="space-y-2">
                        <Label htmlFor="address">Address</Label>
                        <Textarea id="address" name="address" placeholder="Enter student's address" value={formData.address}
                            onChange={handleChange} required />
                    </div>







                </CardContent>






                <CardFooter>
                    <Button type="submit" className="w-full">Add Student</Button>
                </CardFooter>





            </form>
        </Card>
    )
}

===== src/app/(logged-in)/class-list/page.tsx =====
"use client";

import { useEffect } from 'react';
import { useAppSelector, useAppDispatch } from '@/store/hooks';
import { fetchClasses } from '@/store/classSlice';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function ClassListPage() {
	const dispatch = useAppDispatch();
	const { classes, isLoading, error } = useAppSelector((state) => state.class);

	useEffect(() => {
		dispatch(fetchClasses());
	}, [dispatch]);

	if (isLoading) {
		return <div>Loading...</div>;
	}

	if (error) {
		return <div>Error: {error}</div>;
	}

	return (
		<div className="container mx-auto px-4 py-8">
			<h1 className="text-2xl font-bold mb-4">Class List</h1>
			{classes.map((classItem) => (
				<Card key={classItem.id} className="mb-4">
					<CardHeader>
						<CardTitle>{classItem.name}</CardTitle>
					</CardHeader>
					<CardContent>
						<p><strong>Schedule:</strong> {classItem.schedule}</p>
						<p><strong>Capacity:</strong> {classItem.capacity}</p>
					</CardContent>
				</Card>
			))}
		</div>
	);
}

===== src/app/(logged-in)/home/page.tsx =====
import Link from 'next/link'
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Users, BookOpen, Calendar, TrendingUp } from 'lucide-react'

export default function HomePage() {
    return (
        <div className="container mx-auto px-4 py-8">
            <header className="text-center mb-12">
                <h1 className="text-4xl font-bold text-primary mb-4">Welcome to My Academy</h1>
                <p className="text-xl text-muted-foreground">Empowering teachers to inspire and educate</p>
            </header>

            <section className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
                <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                        <CardTitle className="text-sm font-medium">Total Students</CardTitle>
                        <Users className="h-4 w-4 text-muted-foreground" />
                    </CardHeader>
                    <CardContent>
                        <div className="text-2xl font-bold">1,234</div>
                        <p className="text-xs text-muted-foreground">+10% from last month</p>
                    </CardContent>
                </Card>
                <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                        <CardTitle className="text-sm font-medium">Active Classes</CardTitle>
                        <BookOpen className="h-4 w-4 text-muted-foreground" />
                    </CardHeader>
                    <CardContent>
                        <div className="text-2xl font-bold">56</div>
                        <p className="text-xs text-muted-foreground">+2 new classes this week</p>
                    </CardContent>
                </Card>
                <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                        <CardTitle className="text-sm font-medium">Upcoming Sessions</CardTitle>
                        <Calendar className="h-4 w-4 text-muted-foreground" />
                    </CardHeader>
                    <CardContent>
                        <div className="text-2xl font-bold">12</div>
                        <p className="text-xs text-muted-foreground">In the next 24 hours</p>
                    </CardContent>
                </Card>
                <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                        <CardTitle className="text-sm font-medium">Average Performance</CardTitle>
                        <TrendingUp className="h-4 w-4 text-muted-foreground" />
                    </CardHeader>
                    <CardContent>
                        <div className="text-2xl font-bold">85%</div>
                        <p className="text-xs text-muted-foreground">+5% from last semester</p>
                    </CardContent>
                </Card>
            </section>

            <section className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
                <Card>
                    <CardHeader>
                        <CardTitle>Quick Actions</CardTitle>
                        <CardDescription>Access frequently used features</CardDescription>
                    </CardHeader>
                    <CardContent className="grid grid-cols-2 gap-4">
                        <Link href="/add-student">
                            <Button className="w-full">
                                <Users className="mr-2 h-4 w-4" />
                                Add Student
                            </Button>
                        </Link>
                        <Link href="/add-classes">
                            <Button className="w-full">
                                <BookOpen className="mr-2 h-4 w-4" />
                                Create Class
                            </Button>
                        </Link>
                        <Link href="/students">
                            <Button className="w-full" variant="outline">
                                <Users className="mr-2 h-4 w-4" />
                                View Students
                            </Button>
                        </Link>
                        <Link href="/classes">
                            <Button className="w-full" variant="outline">
                                <BookOpen className="mr-2 h-4 w-4" />
                                View Classes
                            </Button>
                        </Link>
                    </CardContent>
                </Card>
                <Card>
                    <CardHeader>
                        <CardTitle>Recent Updates</CardTitle>
                        <CardDescription>Stay informed about the latest changes</CardDescription>
                    </CardHeader>
                    <CardContent>
                        <ul className="space-y-4">
                            <li className="flex items-center">
                                <span className="w-2 h-2 bg-blue-500 rounded-full mr-2"></span>
                                <span className="flex-grow">New student enrollment feature added</span>
                                <span className="text-sm text-muted-foreground">2d ago</span>
                            </li>
                            <li className="flex items-center">
                                <span className="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
                                <span className="flex-grow">Performance tracking system updated</span>
                                <span className="text-sm text-muted-foreground">5d ago</span>
                            </li>
                            <li className="flex items-center">
                                <span className="w-2 h-2 bg-yellow-500 rounded-full mr-2"></span>
                                <span className="flex-grow">Upcoming maintenance scheduled for next week</span>
                                <span className="text-sm text-muted-foreground">1w ago</span>
                            </li>
                        </ul>
                    </CardContent>
                </Card>
            </section>

            <section className="text-center">
                <h2 className="text-2xl font-bold mb-4">Need Help?</h2>
                <p className="mb-4">Our support team is always ready to assist you.</p>
                <Button variant="secondary">Contact Support</Button>
            </section>
        </div>
    )
}

===== src/app/(logged-in)/layout.tsx =====
import ProtectedRoute from '@/components/ProtectedRoute';
import LoggedInHeader from "@/components/Headers/LoggedInHeader";

export default function TeacherLayout({
    children,
}: Readonly<{
    children: React.ReactNode;
}>) {
    return (
        <ProtectedRoute>
            <div>
                <LoggedInHeader />
                {children}
            </div>
        </ProtectedRoute>
    );
}

===== src/app/(logged-in)/student-list/page.tsx =====
"use client";

import { useState } from 'react'
import { useRouter } from 'next/navigation';
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input";
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card";
import { EyeIcon, PencilIcon, TrashIcon, ChevronLeftIcon, ChevronRightIcon, Router } from 'lucide-react';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";

// Mock data for demonstration
const mockStudents = [
    { id: 1, firstName: 'John', lastName: 'Doe', age: 15, grade: 10, email: 'john.doe@example.com' },
    { id: 2, firstName: 'Jane', lastName: 'Smith', age: 16, grade: 11, email: 'jane.smith@example.com' },
    { id: 3, firstName: 'Bob', lastName: 'Johnson', age: 14, grade: 9, email: 'bob.johnson@example.com' },
    { id: 4, firstName: 'Alice', lastName: 'Williams', age: 17, grade: 12, email: 'alice.williams@example.com' },
    { id: 5, firstName: 'Charlie', lastName: 'Brown', age: 15, grade: 10, email: 'charlie.brown@example.com' },
    // Add more mock data as needed
]

export default function Component() {
    const [searchTerm, setSearchTerm] = useState('')
    const [currentPage, setCurrentPage] = useState(1)
    const studentsPerPage = 5
    const router = useRouter();
    // Filter students based on search term
    const filteredStudents = mockStudents.filter(student =>
        student.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        student.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        student.email.toLowerCase().includes(searchTerm.toLowerCase())
    )

    // Paginate students
    const indexOfLastStudent = currentPage * studentsPerPage
    const indexOfFirstStudent = indexOfLastStudent - studentsPerPage
    const currentStudents = filteredStudents.slice(indexOfFirstStudent, indexOfLastStudent)

    const totalPages = Math.ceil(filteredStudents.length / studentsPerPage)

    const handleViewStudent = (id) => {
        console.log(`View student with id: ${id}`)
        // Implement view logic
    }

    const handleEditStudent = (id) => {
        console.log(`Edit student with id: ${id}`)
        // Implement edit logic
    }

    const handleDeleteStudent = (id) => {
        console.log(`Delete student with id: ${id}`)
        // Implement delete logic
    }

    return (
        <Card className="w-full max-w-4xl mx-auto mt-10">
            <CardHeader>
                <CardTitle>Student List</CardTitle>
                <CardDescription>Manage your tuition academy students</CardDescription>
            </CardHeader>
            <CardContent>
                <div className="flex justify-between items-center mb-4">
                    <Input
                        placeholder="Search students..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="max-w-sm"
                    />
                    <Button onClick={() => router.push('/add-student')}>Add New Student</Button>
                </div>
                <div className="rounded-md border">
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHead>Name</TableHead>
                                <TableHead>Age</TableHead>
                                <TableHead>Grade</TableHead>
                                <TableHead>Email</TableHead>
                                <TableHead className="text-right">Actions</TableHead>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {currentStudents.map((student) => (
                                <TableRow key={student.id}>
                                    <TableCell>{`${student.firstName} ${student.lastName}`}</TableCell>
                                    <TableCell>{student.age}</TableCell>
                                    <TableCell>{student.grade}</TableCell>
                                    <TableCell>{student.email}</TableCell>
                                    <TableCell className="text-right">
                                        <Button variant="ghost" size="icon" onClick={() => handleViewStudent(student.id)} aria-label={`View ${student.firstName} ${student.lastName}`}>
                                            <EyeIcon className="h-4 w-4" />
                                        </Button>
                                        <Button variant="ghost" size="icon" onClick={() => handleEditStudent(student.id)} aria-label={`Edit ${student.firstName} ${student.lastName}`}>
                                            <PencilIcon className="h-4 w-4" />
                                        </Button>
                                        <Button variant="ghost" size="icon" onClick={() => handleDeleteStudent(student.id)} aria-label={`Delete ${student.firstName} ${student.lastName}`}>
                                            <TrashIcon className="h-4 w-4" />
                                        </Button>
                                    </TableCell>
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                </div>
                <div className="flex items-center justify-between space-x-2 py-4">
                    <div className="text-sm text-muted-foreground">
                        Showing {indexOfFirstStudent + 1} to {Math.min(indexOfLastStudent, filteredStudents.length)} of {filteredStudents.length} students
                    </div>
                    <div className="space-x-2">
                        <Button
                            variant="outline"
                            size="sm"
                            onClick={() => setCurrentPage((old) => Math.max(old - 1, 1))}
                            disabled={currentPage === 1}
                        >
                            <ChevronLeftIcon className="h-4 w-4" />
                            Previous
                        </Button>
                        <Button
                            variant="outline"
                            size="sm"
                            onClick={() => setCurrentPage((old) => Math.min(old + 1, totalPages))}
                            disabled={currentPage === totalPages}
                        >
                            Next
                            <ChevronRightIcon className="h-4 w-4" />
                        </Button>
                    </div>
                </div>
            </CardContent>
        </Card>
    )
}

===== src/app/(logged-in)/user/page.tsx =====
"use client";

import { useEffect } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { useAppSelector, useAppDispatch } from '@/store/hooks';
import { fetchUserData } from '@/store/authSlice';

export default function UserPage() {
  const dispatch = useAppDispatch();
  const { user, isLoading, error } = useAppSelector((state) => state.auth);

  useEffect(() => {
    if (!user) {
      dispatch(fetchUserData());
    }
  }, [dispatch, user]);

  if (isLoading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  if (!user) {
    return <div>No user data available</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <Card>
        <CardHeader>
          <CardTitle>User Information</CardTitle>
        </CardHeader>
        <CardContent>
          <p><strong>ID:</strong> {user.id}</p>
          <p><strong>Email:</strong> {user.email}</p>
          <p><strong>Provider:</strong> {user.provider}</p>
          <p><strong>Organization ID:</strong> {user.orgId}</p>
          <p><strong>Email Verified:</strong> {user.emailVerified ? 'Yes' : 'No'}</p>
        </CardContent>
      </Card>
    </div>
  );
}

===== src/app/ReduxProvider.tsx =====
'use client'

import { Provider } from 'react-redux'
import { store } from '../store/store' // adjust this path as needed

export function ReduxProvider({ children }: { children: React.ReactNode }) {
  return <Provider store={store}>{children}</Provider>
}

===== src/app/about/page.tsx =====
"use client";

import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function AboutPage() {
    return (
        <div className="container mx-auto px-4 py-8">
            <Card>
                <CardHeader>
                    <CardTitle>About My Academy</CardTitle>
                </CardHeader>
                <CardContent>
                    <p className="mb-4">
                        My Academy is an innovative tuition academy management software designed to streamline operations for small to medium-sized educational institutions. Our platform empowers teachers and administrators to focus on what matters most - education.
                    </p>
                    <p className="mb-4">
                        Key features of My Academy include:
                    </p>
                    <ul className="list-disc list-inside mb-4">
                        <li>Efficient student management</li>
                        <li>Class scheduling and organization</li>
                        <li>Attendance tracking</li>
                        <li>Performance analysis tools</li>
                        <li>Fee management system</li>
                    </ul>
                    <p>
                        Developed by aqlio.com, My Academy is committed to enhancing the educational experience for both educators and students alike.
                    </p>
                </CardContent>
            </Card>
        </div>
    );
}

===== src/app/globals.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

===== src/app/layout.tsx =====

import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { ReduxProvider } from "@/app/ReduxProvider"; // adjust this path as needed
import AuthInitializer from "@/components/AuthInitializer";
import Footer from "@/components/Footer"; // Add this import
const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
	title: "My Academy - Tuition Academy Management Software",
	description: "Streamline your tuition academy operations with My Academy. Manage students, classes, attendance, and more efficiently.",
};

export default function RootLayout({
	children,
}: Readonly<{
	children: React.ReactNode;
}>) {
	return (
		<html lang="en">
			<body className={inter.className}>
				<ReduxProvider>
					<AuthInitializer />
					<div className="flex flex-col min-h-screen">
						<main className="flex-grow">
							{children}
						</main>
						<Footer />
					</div>
				</ReduxProvider>
			</body>
		</html>
	);
}

===== src/app/page.tsx =====
"use client"

import Head from 'next/head'
import Link from 'next/link'
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { DollarSign, BarChart2, TrendingUp, UserCheck } from 'lucide-react'
import { LucideIcon } from 'lucide-react'
import LoggedOutHeader from '@/components/Headers/LoggedOutHeader'


export default function Home() {

  const FeatureCard = ({ icon: Icon, title, description }: { icon: LucideIcon; title: string; description: string }) => (
    <Card>
      <CardHeader>
        <Icon className="h-8 w-8 mb-2 text-primary" />
        <CardTitle>{title}</CardTitle>
      </CardHeader>
      <CardContent>
        <p>{description}</p>
      </CardContent>
    </Card>
  )

  return (
    <div className="min-h-screen flex flex-col">
      <Head>
        <title>My Academy: Efficient Academy Management Software</title>
        <meta name="description" content="My Academy, owned by aqlio.com, simplifies academy management for small to medium institutions. Manage fees, track attendance, analyze performance, and more." />
        <link rel="icon" href="/favicon.ico" />
      </Head>


      <LoggedOutHeader />



      <main className="flex-grow">
        <section className="bg-muted py-20 text-center">
          <div className="container mx-auto px-4">
            <h1 className="text-4xl font-bold mb-4">Simplify Your Academy Management</h1>
            <p className="text-xl text-muted-foreground mb-8">Streamline operations, boost efficiency, and focus on what matters most - education.</p>
            <Button size="lg" asChild>
              <Link href="/login">Get Started</Link>
            </Button>
          </div>
        </section>

        <section id="features" className="py-20">
          <div className="container mx-auto px-4">
            <h2 className="text-3xl font-bold text-center mb-12">Key Features</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
              <FeatureCard
                icon={DollarSign}
                title="Fee Management"
                description="Manage fees online, support various payment methods, track payments, and send reminders."
              />
              <FeatureCard
                icon={BarChart2}
                title="Smart Dashboards"
                description="Prioritize tasks based on upcoming exams and tests for each student."
              />
              <FeatureCard
                icon={TrendingUp}
                title="Performance Analysis"
                description="Track common exam topics and prioritize teaching accordingly."
              />
              <FeatureCard
                icon={UserCheck}
                title="Attendance Tracking"
                description="Use QR scanning or manual input for easy attendance management."
              />
            </div>
          </div>
        </section>
      </main>

      <footer className="bg-background border-t py-8">
        <div className="container mx-auto px-4 text-center">
          <p className="text-muted-foreground">&copy; 2024 My Academy. All rights reserved.</p>
          <p className="text-muted-foreground mt-2">
            My Academy is owned and operated by{' '}
            <a href="https://www.aqlio.com" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
              aqlio.com
            </a>
          </p>
        </div>
      </footer>
    </div>
  )
}

===== src/components/AuthInitializer.tsx =====
"use client";

import { useEffect } from "react";
import { useAppDispatch } from "@/store/hooks";
import { initializeAuth } from "@/store/authSlice";

export default function AuthInitializer() {
  const dispatch = useAppDispatch();

  useEffect(() => {
    dispatch(initializeAuth());
  }, [dispatch]);

  return null;
}

===== src/components/Footer.tsx =====
import React from 'react';
import Link from 'next/link';

const Footer: React.FC = () => {
  return (
    <footer className="bg-background border-t py-8">
      <div className="container mx-auto px-4">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          <div>
            <h3 className="text-lg font-semibold mb-4">My Academy</h3>
            <p className="text-muted-foreground">
              Empowering education through innovative management solutions.
            </p>
          </div>
          <div>
            <h3 className="text-lg font-semibold mb-4">Quick Links</h3>
            <ul className="space-y-2">
              <li><Link href="/about" className="text-muted-foreground hover:text-primary">About Us</Link></li>
              <li><Link href="/contact" className="text-muted-foreground hover:text-primary">Contact</Link></li>
              <li><Link href="/privacy" className="text-muted-foreground hover:text-primary">Privacy Policy</Link></li>
              <li><Link href="/terms" className="text-muted-foreground hover:text-primary">Terms of Service</Link></li>
            </ul>
          </div>
          <div>
            <h3 className="text-lg font-semibold mb-4">Connect With Us</h3>
            <p className="text-muted-foreground mb-2">Follow us on social media:</p>
            <div className="flex space-x-4">
              {/* Add your social media icons/links here */}
              <a href="#" className="text-muted-foreground hover:text-primary">Facebook</a>
              <a href="#" className="text-muted-foreground hover:text-primary">Twitter</a>
              <a href="#" className="text-muted-foreground hover:text-primary">LinkedIn</a>
            </div>
          </div>
        </div>
        <div className="mt-8 pt-8 border-t text-center text-muted-foreground">
          <p>&copy; {new Date().getFullYear()} My Academy. All rights reserved.</p>
          <p className="mt-2">
            My Academy is owned and operated by{' '}
            <a href="https://www.aqlio.com" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
              aqlio.com
            </a>
          </p>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

===== src/components/Headers/HeaderNavLinks.tsx =====
import Link from "next/link"
import { cn } from "@/utils/utils"
import { usePathname } from "next/navigation"
import { INavigationItem } from "@/lib/types/INavigationItem"
import { INavigationProps } from "@/lib/types/INavigationProps"

export default function HeaderNavLinks({ navigationItems }: INavigationProps) {
    const pathname = usePathname()

    return (
        <div className="hidden md:flex md:space-x-4">
            {navigationItems.map((item: INavigationItem) => (
                <Link key={item.href} href={item.href}
                    className={cn(
                        "flex items-center text-sm font-medium transition-colors hover:text-primary",
                        pathname === item.href
                            ? "text-primary"
                            : "text-muted-foreground"
                    )}
                >
                    <item.icon className="mr-2 h-4 w-4" />
                    {item.name}
                </Link>
            ))}
        </div>
    )
}

===== src/components/Headers/LoggedInHeader.tsx =====
"use client"





import * as React from "react"
import { useAuth } from '@/store/hooks';

import Logo from "@/components/Logo"
import { navigationItems } from "@/config/navigation"
import HeaderNavLinks from "@/components/Headers/HeaderNavLinks"
import LeftNavigation from "@/components/Navigations/LeftNavigation"
import ProfileDropdownMenu from "@/components/Profile/ProfileDropdownMenu"






export default function LoggedInHeader() {
	const { isLoggedIn } = useAuth();


	return (
		<nav className="border-b bg-background">
			<div className="flex h-16 items-center px-4">
				<Logo className="mr-4" />
				<HeaderNavLinks navigationItems={navigationItems} />
				<div className="flex-grow" />
				<div className="flex items-center justify-between space-x-2 md:justify-end">
					{isLoggedIn && <ProfileDropdownMenu />}
				</div>
				<LeftNavigation navigationItems={navigationItems} />
			</div>
		</nav>
	)
}

===== src/components/Headers/LoggedOutHeader.tsx =====
"use client"





import * as React from "react"
import Logo from "@/components/Logo"








export default function LoggedOutHeader() {



    return (
        <nav className="border-b absolute top-0 left-0 right-0 z-50 bg-background">
            <div className="flex h-16 items-center px-4">
                <Logo className="mr-4" />
            </div>
        </nav>
    )



}

===== src/components/Logo.tsx =====
import { FC } from 'react';
import Link from 'next/link'
import { BookOpen } from 'lucide-react'

interface LogoProps {
  className?: string;
  href?: string;
}

const Logo: FC<LogoProps> = ({ className, href = "/home" }) => {
  return (
    <Link href={href} className={`flex items-center ${className}`}>
      <BookOpen className="h-8 w-8 text-primary" />
      <span className="text-2xl font-bold ml-2">My Academy</span>
    </Link>
  )
};

export default Logo;

===== src/components/Navigations/LeftNavigation.tsx =====
import React from 'react'
import Link from "next/link"
import { cn } from "@/utils/utils"
import Logo from "@/components/Logo"
import { MenuIcon } from "lucide-react"
import { usePathname } from "next/navigation"
import { Button } from "@/components/ui/button"
import { ScrollArea } from "@/components/ui/scroll-area"
import { INavigationProps } from "@/lib/types/INavigationProps"
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet"

export default function LeftNavigation({ navigationItems }: INavigationProps) {
    const pathname = usePathname()

    return (
        <Sheet>
            <SheetTrigger asChild>
                <Button
                    variant="ghost"
                    className="h-9 w-9 p-0 md:hidden"
                    aria-label="Open menu"
                >
                    <MenuIcon className="h-5 w-5" />
                </Button>
            </SheetTrigger>
            <SheetContent side="left">
                <Logo href="/" />
                <ScrollArea className="my-4 h-[calc(100vh-8rem)] pb-10">
                    <div className="flex flex-col space-y-2">
                        {navigationItems.map((item) => (
                            <Link
                                key={item.href}
                                href={item.href}
                                className={cn(
                                    "flex items-center py-2 text-sm font-medium transition-colors hover:text-primary",
                                    pathname === item.href
                                        ? "text-primary"
                                        : "text-muted-foreground"
                                )}
                            >
                                <item.icon className="mr-2 h-4 w-4" />
                                {item.name}
                            </Link>
                        ))}
                    </div>
                </ScrollArea>
            </SheetContent>
        </Sheet>
    )
}

===== src/components/Profile/ProfileDropdownMenu.tsx =====
import React from "react"
import { useRouter } from "next/navigation"
import { useAppDispatch } from '@/store/hooks'
import { logout } from '@/store/authSlice'
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import { LogOut } from "lucide-react"
import UserAvatar from "@/components/Profile/UserAvatar"

export default function ProfileDropdownMenu() {
    const router = useRouter();
    const dispatch = useAppDispatch();

    const handleLogout = () => {
        dispatch(logout());
        router.push('/');
    }

    return (
        <DropdownMenu>
            <DropdownMenuTrigger asChild>
                <Button variant="ghost" className="relative h-8 w-8 rounded-full">
                    <UserAvatar avatarName="vishal" avatarUrl="https://i.pravatar.cc/150?u=vishal@example.com" />
                </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
                <DropdownMenuItem onClick={handleLogout}>
                    <LogOut className="mr-2 h-4 w-4" />
                    <span>Log out</span>
                </DropdownMenuItem>
            </DropdownMenuContent>
        </DropdownMenu>
    )
}

===== src/components/Profile/UserAvatar.tsx =====
import IUserAvatarProps from "@/lib/interfaces/User/IUserAvatarProps";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import clsx from "clsx";



export default function UserAvatar({ avatarName, avatarUrl, className }: IUserAvatarProps) {
    return (
        <Avatar className={clsx("h-8 w-8", className)}>
            <AvatarImage src={avatarUrl} alt={avatarName} />
            <AvatarFallback>{avatarName.split(' ').map(n => n[0]).join('')}</AvatarFallback>
        </Avatar>
    )
}

===== src/components/ProtectedRoute.tsx =====
"use client";

import { useEffect } from 'react';
import { useAuth } from '@/store/hooks';
import { useRouter } from 'next/navigation';

interface ProtectedRouteProps {
  children: React.ReactNode;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
  const { isLoggedIn } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!isLoggedIn) {
      router.push('/');
    }
  }, [isLoggedIn, router]);

  return isLoggedIn ? <>{children}</> : null;
};

export default ProtectedRoute;

===== src/components/ui/avatar.tsx =====
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/utils/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


===== src/components/ui/button.tsx =====
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/utils/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


===== src/components/ui/card.tsx =====
import * as React from "react"

import { cn } from "@/utils/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


===== src/components/ui/dropdown-menu.tsx =====
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/utils/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


===== src/components/ui/input.tsx =====
import * as React from "react"

import { cn } from "@/utils/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


===== src/components/ui/label.tsx =====
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/utils/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


===== src/components/ui/scroll-area.tsx =====
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/utils/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


===== src/components/ui/select.tsx =====
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/utils/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


===== src/components/ui/sheet.tsx =====
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/utils/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}


===== src/components/ui/table.tsx =====
import * as React from "react"

import { cn } from "@/utils/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


===== src/components/ui/textarea.tsx =====
import * as React from "react"

import { cn } from "@/utils/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }


===== src/config/config.ts =====
// src/config/config.ts
export const API_BASE_URL: string = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3000/api';


===== src/config/navigation.ts =====
import { INavigationItem } from "@/lib/types/INavigationItem"
import { Users, UserPlus, FolderPlus, Layers, User, Info } from "lucide-react"

export const navigationItems: INavigationItem[] = [
    { name: 'Student List', icon: Users, href: '/student-list' },
    { name: 'Add Student', icon: UserPlus, href: '/add-student' },
    { name: 'Add Classes', icon: FolderPlus, href: '/add-class' },
    { name: 'Class List', icon: Layers, href: '/class-list' },
    { name: 'User Profile', icon: User, href: '/user' },
    { name: 'About', icon: Info, href: '/about' }, // Add this line
]

===== src/constants/apiConstants.ts =====
// src/constants/apiConstants.ts

export const API_BASE_URL = 'https://api.aqlio.com'; // Update this to your actual API base URL

export const API_PATHS = {
  AUTH: {
    LOGIN: '/auth/local',
    SIGNUP: '/auth/local',
  },
  USER: {
    GET_USER: '/users',
    UPDATE_USER: '/users',
    DELETE_USER: '/users',
  },
  STUDENT: {
    GET_STUDENT: '/students',
    CREATE_STUDENT: '/students',
    UPDATE_STUDENT: '/students',
    DELETE_STUDENT: '/students',
  },
  CLASS: {
    GET_CLASSES: '/classes',
    CREATE_CLASS: '/classes',
    UPDATE_CLASS: '/classes',
    DELETE_CLASS: '/classes',
    ENROLLMENTS: '/enrollments', // Adjust as per your API structure
  },
  LECTURE: {
    GET_LECTURES: '/lectures',
    CREATE_LECTURE: '/lectures',
    UPDATE_LECTURE: '/lectures',
    DELETE_LECTURE: '/lectures',
  },
  BILLING: {
    GET_BILLINGS: '/billings',
    UPDATE_BILLINGS: '/billings',
  },
};


===== src/interfaces/IAuthState.ts =====
import { IUserData } from "./IUserData";

export default interface IAuthState {
  user: IUserData | null;
  token: string | null;
  isLoading: boolean;
  error: string | null;
}


===== src/interfaces/IBilling.ts =====
// src/interfaces/IBilling.ts
export interface IBilling {
    name: string;
    address: string;
    address_line: string;
    city: string;
    state_code: string;
    country_code: string;
    postal: string;
    currency: string;
    gst_number: string;
    emails: string[];
  }
  

===== src/interfaces/IClass.ts =====
// src/interfaces/IClass.ts
import { ITest } from './ITest';

export interface IClass {
  id: string;
  title: string;
  description: string;
  classCode: string;
  orgId?: string;
  teacherId?: string;
  time: string; // ISO string
  durationInSeconds: number;
  tests: ITest[];
  deleted: boolean;
  deletedAt?: string; // ISO string
  deletedBy?: string;
  createdAt?: string; // ISO string
  updatedAt?: string; // ISO string
}


===== src/interfaces/IClassEnrollment.ts =====
import { ITest } from "./ITest";


export interface IClassEnrollment {
  id: string;
  classId: string;
  orgId: string;
  studentId: string;
  status: "pending" | "enrolled" | "rejected";
  scores: ITest[];
  deleted: boolean;
  createdBy: string;
  deletedAt?: string; // ISO string
  deletedBy?: string;
  createdAt?: string; // ISO string
  updatedAt?: string; // ISO string
}


===== src/interfaces/ILecture.ts =====
// src/interfaces/ILecture.ts
export interface ILecture {
    id: string;
    classId: string;
    orgId?: string;
    teacherId?: string;
    date: string; // ISO string
    attendance: any[]; // Define a specific interface if possible
    createdAt?: string; // ISO string
    updatedAt?: string; // ISO string
  }
  

===== src/interfaces/IOrganization.ts =====
// src/interfaces/IOrganization.ts
import { IBilling } from './IBilling';

export interface IOrganization {
  id: string;
  api_rate_limit_per_sec?: number;
  rateLimit?: Record<string, any>; // Adjust type as needed
  unpaid: boolean;
  plans?: Record<string, any>; // Adjust type as needed
  billing: IBilling;
  deleted: boolean;
  deletedAt?: string; // ISO string
  createdAt?: string; // ISO string
  updatedAt?: string; // ISO string
}


===== src/interfaces/IStudent.ts =====
// src/interfaces/IStudent.ts
export interface IStudent {
    id: string;
    email: string;
    roles: string[];
    googleId?: string;
    provider?: string;
    photoUrl?: string;
    displayName?: string;
    orgId?: string;
    hashedPassword?: string;
    salt?: string;
    emailConfirmToken?: string;
    resetToken?: string;
    trackingPermission: boolean;
    emailVerified: boolean;
    deleted: boolean;
    last_login?: string; // ISO string
    last_login_ip?: string;
    createdAt?: string; // ISO string
    updatedAt?: string; // ISO string
  }
  

===== src/interfaces/ITest.ts =====
// src/interfaces/ITest.ts
export interface ITest {
    id?: string;
    classId: string;
    orgId?: string;
    teacherId?: string;
    weight: number;
    marks: any[]; // Define a specific interface if possible
    attendance: any[]; // Define a specific interface if possible
    createdAt?: string; // ISO string
    updatedAt?: string; // ISO string
  }
  

===== src/interfaces/IUser.ts =====
// src/interfaces/IUser.ts
export interface IUser {
    id: string;
    email: string;
    roles: string[];
    googleId?: string;
    provider?: string;
    photoUrl?: string;
    displayName?: string;
    orgId?: string;
    hashedPassword?: string;
    salt?: string;
    emailConfirmToken?: string;
    resetToken?: string;
    trackingPermission: boolean;
    emailVerified: boolean;
    deleted: boolean;
    last_login?: string; // ISO string
    last_login_ip?: string;
    createdAt?: string; // ISO string
    updatedAt?: string; // ISO string
  }
  

===== src/interfaces/IUserData.ts =====
export interface IUserData {
  id: string;
  email: string;
  provider: string;
  orgId: string;
  emailVerified: boolean;
}


===== src/interfaces/IUserLoginRequestData.ts =====
export default interface IUserLoginRequestData {
  email: string;
  password: string;
}


===== src/interfaces/IUserLoginResponse.ts =====
export default interface IAuthApiResponse {
  token: string;
}


===== src/lib/types/ClassNameOnlyProps.ts =====
/**
 * Adds an optional className prop to any type T.
 * If T is not provided, it defaults to an empty object.
 */
export type WithClassName<T = {}> = T & {
    className?: string;
};

/**
 * A type for components that don't need any props other than className.
 */
export type ClassNameOnlyProps = WithClassName;

===== src/lib/types/INavigationItem.ts =====
import { LucideIcon } from "lucide-react"

export interface INavigationItem {
  name: string;
  icon: LucideIcon;
  href: string;
}

===== src/lib/types/INavigationProps.ts =====
import { INavigationItem } from "@/lib/types/INavigationItem"

export interface INavigationProps {
    navigationItems: INavigationItem[];
}

===== src/models/BaseModel.ts =====
// src/models/BaseModel.ts

import { plainToInstance } from "class-transformer";
import { validateOrReject, ValidatorOptions } from "class-validator";

/**
 * Abstract class representing the base model.
 */
export abstract class BaseModel {
  constructor(partial?: Partial<any>) {
    Object.assign(this, partial);
  }

  /**
   * Deserialize plain object to class instance with validation.
   */
  static async fromPlain<T extends BaseModel>(
    this: new (partial?: Partial<T>) => T,
    plain: object,
    validatorOptions?: ValidatorOptions
  ): Promise<T> {
    const instance = plainToInstance(this, plain, {
      excludeExtraneousValues: true,
    });
    await validateOrReject(instance, { whitelist: true, ...validatorOptions });
    return instance;
  }

  /**
   * Serialize class instance to JSON.
   */
  toJSON(): any {
    return JSON.parse(JSON.stringify(this));
  }
}


===== src/models/Billing.ts =====
// src/models/Billing.ts
import { Expose } from 'class-transformer';
import { IsString, IsArray, ArrayNotEmpty } from 'class-validator';
import { IBilling } from '../interfaces/IBilling';
import { BaseModel } from './BaseModel';

export class Billing extends BaseModel implements IBilling {
  @Expose()
  @IsString()
  name!: string;

  @Expose()
  @IsString()
  address!: string;

  @Expose()
  @IsString()
  address_line!: string;

  @Expose()
  @IsString()
  city!: string;

  @Expose()
  @IsString()
  state_code!: string;

  @Expose()
  @IsString()
  country_code!: string;

  @Expose()
  @IsString()
  postal!: string;

  @Expose()
  @IsString()
  currency!: string;

  @Expose()
  @IsString()
  gst_number!: string;

  @Expose()
  @IsArray()
  @ArrayNotEmpty()
  emails!: string[];

  constructor(partial: Partial<Billing>) {
    super(partial);
  }
}


===== src/models/Class.ts =====
// src/models/Class.ts
import { Expose, Type } from 'class-transformer';
import { IsBoolean, IsDateString, IsNumber, IsOptional, IsString, ValidateNested, IsArray } from 'class-validator';
import { BaseModel } from './BaseModel';
import { IClass } from '../interfaces/IClass';
import { Test } from './Test';

export class Class extends BaseModel implements IClass {
  static apiEndpoint = '/classes';

  @Expose()
  @IsString()
  id!: string;

  @Expose()
  @IsString()
  title!: string;

  @Expose()
  @IsString()
  description!: string;

  @Expose()
  @IsString()
  classCode!: string;

  @Expose()
  @IsOptional()
  @IsString()
  orgId?: string;

  @Expose()
  @IsOptional()
  @IsString()
  teacherId?: string;

  @Expose()
  @IsDateString()
  time!: string;

  @Expose()
  @IsNumber()
  durationInSeconds!: number;

  @Expose()
  @IsArray()
  @ValidateNested({ each: true })
  @Type(() => Test)
  tests!: Test[];

  @Expose()
  @IsBoolean()
  deleted!: boolean;

  @Expose()
  @IsOptional()
  @IsString()
  deletedAt?: string;

  @Expose()
  @IsOptional()
  @IsString()
  deletedBy?: string;

  @Expose()
  @IsOptional()
  @IsString()
  createdAt?: string;

  @Expose()
  @IsOptional()
  @IsString()
  updatedAt?: string;

  constructor(partial: Partial<Class>) {
    super(partial);
  }

  // Additional methods or overrides if necessary
}


===== src/models/ClassEnrollment.ts =====
// src/models/ClassEnrollment.ts
import { Expose, Type } from 'class-transformer';
import { IsBoolean, IsOptional, IsString, ValidateNested, IsArray, IsEnum } from 'class-validator';
import { BaseModel } from './BaseModel';
import { IClassEnrollment } from '../interfaces/IClassEnrollment';
import { Test } from './Test';

export class ClassEnrollment extends BaseModel implements IClassEnrollment {
  static apiEndpoint = '/enrollments';

  @Expose()
  @IsString()
  id!: string;

  @Expose()
  @IsString()
  classId!: string;

  @Expose()
  @IsString()
  orgId!: string;

  @Expose()
  @IsString()
  studentId!: string;

  @Expose()
  @IsEnum(['pending', 'enrolled', 'rejected'])
  status!: 'pending' | 'enrolled' | 'rejected';

  @Expose()
  @IsArray()
  @ValidateNested({ each: true })
  @Type(() => Test)
  scores!: Test[];

  @Expose()
  @IsBoolean()
  deleted!: boolean;

  @Expose()
  @IsString()
  createdBy!: string;

  @Expose()
  @IsOptional()
  @IsString()
  deletedAt?: string;

  @Expose()
  @IsOptional()
  @IsString()
  deletedBy?: string;

  @Expose()
  @IsOptional()
  @IsString()
  createdAt?: string;

  @Expose()
  @IsOptional()
  @IsString()
  updatedAt?: string;

  constructor(partial: Partial<ClassEnrollment>) {
    super(partial);
  }

  // Additional methods or overrides if necessary
}


===== src/models/Lecture.ts =====
// src/models/Lecture.ts
import { Expose, Type } from 'class-transformer';
import { IsDateString, IsOptional, IsString, IsArray } from 'class-validator';
import { BaseModel } from './BaseModel';
import { ILecture } from '../interfaces/ILecture';

export class Lecture extends BaseModel implements ILecture {
  static apiEndpoint = '/lectures';

  @Expose()
  @IsString()
  id!: string;

  @Expose()
  @IsString()
  classId!: string;

  @Expose()
  @IsOptional()
  @IsString()
  orgId?: string;

  @Expose()
  @IsOptional()
  @IsString()
  teacherId?: string;

  @Expose()
  @IsDateString()
  date!: string;

  @Expose()
  @IsArray()
  attendance!: any[];

  @Expose()
  @IsOptional()
  @IsString()
  createdAt?: string;

  @Expose()
  @IsOptional()
  @IsString()
  updatedAt?: string;

  constructor(partial: Partial<Lecture>) {
    super(partial);
  }

  // Additional methods or overrides if necessary
}


===== src/models/Organization.ts =====
// src/models/Organization.ts
import { Expose, Type } from 'class-transformer';
import { IsBoolean, IsOptional, IsString, ValidateNested } from 'class-validator';
import { BaseModel } from './BaseModel';
import { IOrganization } from '../interfaces/IOrganization';
import { Billing } from './Billing';

export class Organization extends BaseModel implements IOrganization {
  static apiEndpoint = '/organizations';

  @Expose()
  @IsString()
  id!: string;

  @Expose()
  @IsOptional()
  api_rate_limit_per_sec?: number;

  @Expose()
  @IsOptional()
  rateLimit?: Record<string, any>;

  @Expose()
  @IsBoolean()
  unpaid!: boolean;

  @Expose()
  @IsOptional()
  plans?: Record<string, any>;

  @Expose()
  @ValidateNested()
  @Type(() => Billing)
  billing!: Billing;

  @Expose()
  @IsBoolean()
  deleted!: boolean;

  @Expose()
  @IsOptional()
  @IsString()
  deletedAt?: string;

  @Expose()
  @IsOptional()
  @IsString()
  createdAt?: string;

  @Expose()
  @IsOptional()
  @IsString()
  updatedAt?: string;

  constructor(partial: Partial<Organization>) {
    super(partial);
  }

  // Additional methods or overrides if necessary
}


===== src/models/Student.ts =====
// src/models/Student.ts
import { Expose } from 'class-transformer';
import { IsEmail, IsBoolean, IsOptional, IsString, IsArray } from 'class-validator';
import { BaseModel } from './BaseModel';
import { IStudent } from '../interfaces/IStudent';

export class Student extends BaseModel implements IStudent {
  static apiEndpoint = '/students';

  @Expose()
  @IsString()
  id!: string;

  @Expose()
  @IsEmail()
  email!: string;

  @Expose()
  @IsArray()
  roles!: string[];

  @Expose()
  @IsOptional()
  @IsString()
  googleId?: string;

  @Expose()
  @IsOptional()
  @IsString()
  provider?: string;

  @Expose()
  @IsOptional()
  @IsString()
  photoUrl?: string;

  @Expose()
  @IsOptional()
  @IsString()
  displayName?: string;

  @Expose()
  @IsOptional()
  @IsString()
  orgId?: string;

  @Expose()
  @IsOptional()
  @IsString()
  hashedPassword?: string;

  @Expose()
  @IsOptional()
  @IsString()
  salt?: string;

  @Expose()
  @IsOptional()
  @IsString()
  emailConfirmToken?: string;

  @Expose()
  @IsOptional()
  @IsString()
  resetToken?: string;

  @Expose()
  @IsBoolean()
  trackingPermission!: boolean;

  @Expose()
  @IsBoolean()
  emailVerified!: boolean;

  @Expose()
  @IsBoolean()
  deleted!: boolean;

  @Expose()
  @IsOptional()
  @IsString()
  last_login?: string;

  @Expose()
  @IsOptional()
  @IsString()
  last_login_ip?: string;

  @Expose()
  @IsOptional()
  @IsString()
  createdAt?: string;

  @Expose()
  @IsOptional()
  @IsString()
  updatedAt?: string;

  constructor(partial: Partial<Student>) {
    super(partial);
  }

  // Additional methods or overrides if necessary
}


===== src/models/Test.ts =====
// src/models/Test.ts
import { Expose, Type } from 'class-transformer';
import { IsNumber, IsOptional, IsString, ValidateNested, IsArray } from 'class-validator';
import { BaseModel } from './BaseModel';
import { ITest } from '../interfaces/ITest';

export class Test extends BaseModel implements ITest {
  static apiEndpoint = '/tests';

  @Expose()
  @IsOptional()
  @IsString()
  id?: string;

  @Expose()
  @IsString()
  classId!: string;

  @Expose()
  @IsOptional()
  @IsString()
  orgId?: string;

  @Expose()
  @IsOptional()
  @IsString()
  teacherId?: string;

  @Expose()
  @IsNumber()
  weight!: number;

  @Expose()
  @IsArray()
  marks!: any[];

  @Expose()
  @IsArray()
  attendance!: any[];

  @Expose()
  @IsOptional()
  @IsString()
  createdAt?: string;

  @Expose()
  @IsOptional()
  @IsString()
  updatedAt?: string;

  constructor(partial: Partial<Test>) {
    super(partial);
  }

  // Additional methods or overrides if necessary
}


===== src/models/User.ts =====
// src/models/User.ts
import { Expose, Type } from 'class-transformer';
import { IsEmail, IsBoolean, IsOptional, IsString, IsArray } from 'class-validator';
import { BaseModel } from './BaseModel';
import { IUser } from '../interfaces/IUser';

export class User extends BaseModel implements IUser {
  static apiEndpoint = '/users';

  @Expose()
  @IsString()
  id!: string;

  @Expose()
  @IsEmail()
  email!: string;

  @Expose()
  @IsArray()
  roles!: string[];

  @Expose()
  @IsOptional()
  @IsString()
  googleId?: string;

  @Expose()
  @IsOptional()
  @IsString()
  provider?: string;

  @Expose()
  @IsOptional()
  @IsString()
  photoUrl?: string;

  @Expose()
  @IsOptional()
  @IsString()
  displayName?: string;

  @Expose()
  @IsOptional()
  @IsString()
  orgId?: string;

  @Expose()
  @IsOptional()
  @IsString()
  hashedPassword?: string;

  @Expose()
  @IsOptional()
  @IsString()
  salt?: string;

  @Expose()
  @IsOptional()
  @IsString()
  emailConfirmToken?: string;

  @Expose()
  @IsOptional()
  @IsString()
  resetToken?: string;

  @Expose()
  @IsBoolean()
  trackingPermission!: boolean;

  @Expose()
  @IsBoolean()
  emailVerified!: boolean;

  @Expose()
  @IsBoolean()
  deleted!: boolean;

  @Expose()
  @IsOptional()
  @IsString()
  last_login?: string;

  @Expose()
  @IsOptional()
  @IsString()
  last_login_ip?: string;

  @Expose()
  @IsOptional()
  @IsString()
  createdAt?: string;

  @Expose()
  @IsOptional()
  @IsString()
  updatedAt?: string;

  constructor(partial: Partial<User>) {
    super(partial);
  }

}


===== src/repositories/BaseRepository.ts =====
// src/repositories/BaseRepository.ts

import axios, { AxiosInstance, AxiosResponse } from "axios";
import { plainToInstance } from "class-transformer";
import { API_BASE_URL } from "../config/config";
import { handleApiError } from "../utils/ErrorHandler";
import { IRepository } from "./IRepository";
import { BaseModel } from "../models/BaseModel";

export abstract class BaseRepository<T extends BaseModel> implements IRepository<T> {
  protected abstract apiEndpoint: string;
  protected abstract modelClass: new (partial?: Partial<T>) => T;

  protected axiosInstance: AxiosInstance = axios.create({
    baseURL: API_BASE_URL,
    headers: {
      "Content-Type": "application/json",
    },
  });

  /**
   * Set the authentication token for Axios instance.
   */
  setAuthToken(token: string) {
    this.axiosInstance.defaults.headers.common["Authorization"] = `Bearer ${token}`;
  }

  /**
   * Remove the authentication token from Axios instance.
   */
  removeAuthToken() {
    delete this.axiosInstance.defaults.headers.common["Authorization"];
  }

  /**
   * Create a new entity via POST request.
   */
  async create(data: Partial<T>): Promise<T> {
    try {
      const response: AxiosResponse = await this.axiosInstance.post(this.apiEndpoint, data);
      return plainToInstance(this.modelClass, response.data, { excludeExtraneousValues: true });
    } catch (error) {
      handleApiError(error);
      throw error;
    }
  }

  /**
   * Retrieve an entity by ID via GET request.
   */
  async getById(id: string): Promise<T> {
    try {
      const response: AxiosResponse = await this.axiosInstance.get(`${this.apiEndpoint}/${id}`);
      return plainToInstance(this.modelClass, response.data, { excludeExtraneousValues: true });
    } catch (error) {
      handleApiError(error);
      throw error;
    }
  }

  /**
   * Retrieve all entities via GET request with optional query parameters.
   */
  async getAll(params?: Record<string, any>): Promise<T[]> {
    try {
      const response: AxiosResponse = await this.axiosInstance.get(this.apiEndpoint, { params });
      return response.data.map((item: any) =>
        plainToInstance(this.modelClass, item, { excludeExtraneousValues: true })
      );
    } catch (error) {
      handleApiError(error);
      throw error;
    }
  }

  /**
   * Update an existing entity via PUT request.
   */
  async update(entity: T): Promise<T> {
    try {
      const id = (entity as any).id;
      const response: AxiosResponse = await this.axiosInstance.put(`${this.apiEndpoint}/${id}`, entity.toJSON());
      return plainToInstance(this.modelClass, response.data, { excludeExtraneousValues: true });
    } catch (error) {
      handleApiError(error);
      throw error;
    }
  }

  /**
   * Delete an entity via DELETE request.
   */
  async delete(id: string): Promise<void> {
    try {
      await this.axiosInstance.delete(`${this.apiEndpoint}/${id}`);
    } catch (error) {
      handleApiError(error);
      throw error;
    }
  }
}


===== src/repositories/ClassRepository.ts =====
// src/repositories/ClassRepository.ts

import { BaseRepository } from "./BaseRepository";
import { Class } from "../models/Class";

export class ClassRepository extends BaseRepository<Class> {
  protected apiEndpoint = "/classes";
  protected modelClass = Class;

  // Add any Class-specific methods here if needed
}


===== src/repositories/IRepository.ts =====
// src/repositories/IRepository.ts

export interface IRepository<T> {
  create(data: Partial<T>): Promise<T>;
  getById(id: string): Promise<T>;
  getAll(params?: Record<string, any>): Promise<T[]>;
  update(entity: T): Promise<T>;
  delete(id: string): Promise<void>;
}


===== src/repositories/LectureRepository.ts =====
// src/repositories/LectureRepository.ts

import { BaseRepository } from "./BaseRepository";
import { Lecture } from "@/models/Lecture";

export class LectureRepository extends BaseRepository<Lecture> {
  protected apiEndpoint = "/lectures";
  protected modelClass = Lecture;

  // Add any Lecture-specific methods here if needed
}


===== src/store/authSlice.ts =====
// src/store/authSlice.ts

import AuthService from "@/Services/AuthService";
import UserService from "@/Services/UserService";
import IAuthState from "@/interfaces/IAuthState";
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import IUserLoginResponse from "@/interfaces/IUserLoginResponse";
import IUserLoginRequestData from "@/interfaces/IUserLoginRequestData";
import { getInitialToken, setToken, removeToken } from "@/utils/tokenUtils";
import { IUserData } from "@/interfaces/IUserData";

const authService = new AuthService();
const userService = new UserService();

const initialState: IAuthState = {
  user: null,
  token: getInitialToken(),
  isLoading: false,
  error: null,
};

export const loginUser = createAsyncThunk(
  "auth/login",
  async ({ email, password }: IUserLoginRequestData, { dispatch, rejectWithValue }) => {
    try {
      const response: IUserLoginResponse = await authService.login(email, password);
      if (response.token) {
        setToken(response.token);
        dispatch(fetchUserData());
      }
      return response;
    } catch (error: any) {
      return rejectWithValue(error.response?.data?.message || "Login failed");
    }
  }
);

export const signupUser = createAsyncThunk(
  "auth/signup",
  async ({ email, password }: IUserLoginRequestData, { dispatch, rejectWithValue }) => {
    try {
      const response: IUserLoginResponse = await authService.signup(email, password);
      if (response.token) {
        setToken(response.token);
        dispatch(fetchUserData());
      }
      return response;
    } catch (error: any) {
      return rejectWithValue(error.response?.data?.message || "Signup failed");
    }
  }
);

export const fetchUserData = createAsyncThunk(
  "auth/fetchUserData",
  async (_, { getState, rejectWithValue }) => {
    const { auth } = getState() as { auth: IAuthState };
    if (!auth.token) {
      return rejectWithValue("No token available");
    }
    try {
      return await userService.getUser(auth.token);
    } catch (error: any) {
      return rejectWithValue(error.response?.data?.message || "Failed to fetch user data");
    }
  }
);

export const initializeAuth = createAsyncThunk(
  "auth/initialize",
  async (_, { getState, dispatch }) => {
    const { auth } = getState() as { auth: IAuthState };
    if (auth.token && !auth.user) {
      await dispatch(fetchUserData());
    }
  }
);

const authSlice = createSlice({
  name: "auth",
  initialState,

  reducers: {
    logout: (state) => {
      state.user = null;
      state.token = null;
      removeToken();
    },
  },

  extraReducers: (builder) => {
    builder
      // Login
      .addCase(loginUser.pending, (state) => {
        state.isLoading = true;
        state.error = null;
      })
      .addCase(loginUser.fulfilled, (state, action) => {
        state.isLoading = false;
        // Token is already set in loginUser thunk
      })
      .addCase(loginUser.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload as string;
      })
      // Signup
      .addCase(signupUser.pending, (state) => {
        state.isLoading = true;
        state.error = null;
      })
      .addCase(signupUser.fulfilled, (state, action) => {
        state.isLoading = false;
        // Token is already set in signupUser thunk
      })
      .addCase(signupUser.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload as string;
      })
      // Fetch User Data
      .addCase(fetchUserData.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(fetchUserData.fulfilled, (state, action) => {
        state.isLoading = false;
        state.user = action.payload as IUserData;
      })
      .addCase(fetchUserData.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload as string;
      })
      // Initialize Auth
      .addCase(initializeAuth.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(initializeAuth.fulfilled, (state) => {
        state.isLoading = false;
        // User data is fetched in the thunk
      })
      .addCase(initializeAuth.rejected, (state, action) => {
        state.isLoading = false;
        state.token = null;
        removeToken();
        state.error = action.payload as string;
      });
  },
});

export const { logout } = authSlice.actions;
export default authSlice.reducer;


===== src/store/classSlice.ts =====
// src/store/classSlice.ts

import { IClass } from '@/interfaces/IClass';
import ClassService from '@/Services/ClassService';
import { IClassState } from '@/interfaces/IClassState';
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';



const classService = new ClassService();

const initialState: IClassState = {
  classes: [],
  isLoading: false,
  error: null,
};

export const fetchClasses = createAsyncThunk(
  'class/fetchClasses',
  async (_, { getState, rejectWithValue }) => {
    const { auth } = getState() as { auth: { token: string | null } };
    if (!auth.token) {
      return rejectWithValue('No token available');
    }
    try {
      return await classService.getClasses(auth.token);
    } catch (error: any) {
      return rejectWithValue(error.response?.data?.message || 'Failed to fetch classes');
    }
  }
);

export const createClass = createAsyncThunk(
  'class/createClass',
  async (classData: Omit<IClass, 'id'>, { getState, rejectWithValue }) => {
    const { auth } = getState() as { auth: { token: string | null } };
    if (!auth.token) {
      return rejectWithValue('No token available');
    }
    try {
      return await classService.createClass(auth.token, classData);
    } catch (error: any) {
      return rejectWithValue(error.response?.data?.message || 'Failed to create class');
    }
  }
);

export const updateClass = createAsyncThunk(
  'class/updateClass',
  async ({ classId, classData }: { classId: string; classData: Partial<IClass> }, { getState, rejectWithValue }) => {
    const { auth } = getState() as { auth: { token: string | null } };
    if (!auth.token) {
      return rejectWithValue('No token available');
    }
    try {
      return await classService.updateClass(auth.token, classId, classData);
    } catch (error: any) {
      return rejectWithValue(error.response?.data?.message || 'Failed to update class');
    }
  }
);

export const deleteClass = createAsyncThunk(
  'class/deleteClass',
  async (classId: string, { getState, rejectWithValue }) => {
    const { auth } = getState() as { auth: { token: string | null } };
    if (!auth.token) {
      return rejectWithValue('No token available');
    }
    try {
      await classService.deleteClass(auth.token, classId);
      return classId;
    } catch (error: any) {
      return rejectWithValue(error.response?.data?.message || 'Failed to delete class');
    }
  }
);

const classSlice = createSlice({
  name: 'class',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      // Fetch Classes
      .addCase(fetchClasses.pending, (state) => {
        state.isLoading = true;
        state.error = null;
      })
      .addCase(fetchClasses.fulfilled, (state, action) => {
        state.isLoading = false;
        state.classes = action.payload;
      })
      .addCase(fetchClasses.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload as string;
      })
      // Create Class
      .addCase(createClass.pending, (state) => {
        state.isLoading = true;
        state.error = null;
      })
      .addCase(createClass.fulfilled, (state, action) => {
        state.isLoading = false;
        state.classes.push(action.payload);
      })
      .addCase(createClass.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload as string;
      })
      // Update Class
      .addCase(updateClass.pending, (state) => {
        state.isLoading = true;
        state.error = null;
      })
      .addCase(updateClass.fulfilled, (state, action) => {
        state.isLoading = false;
        const index = state.classes.findIndex(c => c.id === action.payload.id);
        if (index !== -1) {
          state.classes[index] = action.payload;
        }
      })
      .addCase(updateClass.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload as string;
      })
      // Delete Class
      .addCase(deleteClass.pending, (state) => {
        state.isLoading = true;
        state.error = null;
      })
      .addCase(deleteClass.fulfilled, (state, action) => {
        state.isLoading = false;
        state.classes = state.classes.filter(c => c.id !== action.payload);
      })
      .addCase(deleteClass.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload as string;
      });
  },
});

export default classSlice.reducer;


===== src/store/hooks.ts =====
// src/store/hooks.ts
import { TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
import type { RootState, AppDispatch } from "./store";

export const useAppDispatch = () => useDispatch<AppDispatch>();
export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

export const useAuth = () => {
  const token = useAppSelector((state) => state.auth.token);
  return { isLoggedIn: !!token };
};


===== src/store/store.ts =====
// src/store/store.ts
import { configureStore } from '@reduxjs/toolkit';
import authReducer from './authSlice';
import classReducer from './classSlice';

export const store = configureStore({
    reducer: {
        auth: authReducer,
        class: classReducer,
    },
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

===== src/utils/ErrorHandler.ts =====
// src/utils/ErrorHandler.ts
import { AxiosError } from 'axios';

export function handleApiError(error: any): void {
  if (error.isAxiosError) {
    const axiosError = error as AxiosError;
    if (axiosError.response) {
      console.error('API Error:', axiosError.response.status, axiosError.response.data);
      // You can implement more sophisticated error handling here
    } else if (axiosError.request) {
      console.error('No response received:', axiosError.request);
    } else {
      console.error('Axios Error:', axiosError.message);
    }
  } else {
    console.error('Unexpected Error:', error);
  }
}


===== src/utils/Validators.ts =====
// src/utils/Validators.ts
import { validate, ValidationError } from 'class-validator';

export async function validateModel<T>(model: T): Promise<ValidationError[]> {
  return await validate(model as any);
}


===== src/utils/tokenUtils.ts =====
export const getInitialToken = (): string | null => {
  if (typeof window !== 'undefined') {
    return localStorage.getItem("token");
  }
  return null;
};

export const setToken = (token: string): void => {
  if (typeof window !== 'undefined') {
    localStorage.setItem("token", token);
  }
};

export const removeToken = (): void => {
  if (typeof window !== 'undefined') {
    localStorage.removeItem("token");
  }
};

===== src/utils/utils.ts =====
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


===== tailwind.config.ts =====
import type { Config } from "tailwindcss"

const config = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
	],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config

export default config

===== tsconfig.json =====
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    },
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
    "target": "ES6" // Added to support decorators
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "src/components/Headers"],
  "exclude": ["node_modules"]
}


===== collect_code.sh =====
[Binary file or inaccessible]


===== src/Services/AuthService.ts =====
// src/lib/services/AuthService.ts

import IUserLoginRequestData from "@/interfaces/IUserLoginRequestData";
import IUserLoginResponse from "@/interfaces/IUserLoginResponse";
import { API_PATHS } from "@/constants/apiConstants";
import axios, { AxiosInstance } from "axios";

class AuthService {
  private axiosInstance: AxiosInstance;

  constructor() {
    this.axiosInstance = axios.create({
      baseURL: API_PATHS.AUTH.LOGIN, // Assuming login and signup share the same base URL
      headers: {
        "Content-Type": "application/json",
      },
    });
  }

  /**
   * Login user with email and password.
   * @param email 
   * @param password 
   * @returns token
   */
  async login(email: string, password: string): Promise<IUserLoginResponse> {
    const response = await this.axiosInstance.post<IUserLoginResponse>(API_PATHS.AUTH.LOGIN, {
      identifier: email,
      password,
    });
    return response.data;
  }

  /**
   * Signup user with email and password.
   * @param email 
   * @param password 
   * @returns token
   */
  async signup(email: string, password: string): Promise<IUserLoginResponse> {
    const response = await this.axiosInstance.post<IUserLoginResponse>(API_PATHS.AUTH.SIGNUP, {
      email,
      password,
    });
    return response.data;
  }
}

export default AuthService;


===== src/Services/BillingService.ts =====
// src/lib/services/BillingService.ts

import { API_PATHS } from "@/constants/apiConstants";
import { IBilling } from "@/interfaces/IBilling";
import axios, { AxiosInstance } from "axios";
import { plainToInstance } from "class-transformer";
import { Billing } from "@/models/Billing";

class BillingService {
  private axiosInstance: AxiosInstance;

  constructor() {
    this.axiosInstance = axios.create({
      baseURL: API_PATHS.BILLING.GET_BILLINGS, // Adjust the API path accordingly
      headers: {
        "Content-Type": "application/json",
      },
    });
  }

  /**
   * Fetch billing information.
   * @param token 
   * @returns IBilling
   */
  async getBilling(token: string): Promise<IBilling> {
    const response = await this.axiosInstance.get<IBilling>(API_PATHS.BILLING.GET_BILLINGS, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return plainToInstance(Billing, response.data, { excludeExtraneousValues: true });
  }

  /**
   * Update billing information.
   * @param token 
   * @param data 
   * @returns IBilling
   */
  async updateBilling(token: string, data: Partial<IBilling>): Promise<IBilling> {
    const response = await this.axiosInstance.put<IBilling>(API_PATHS.BILLING.UPDATE_BILLINGS, data, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return plainToInstance(Billing, response.data, { excludeExtraneousValues: true });
  }
}

export default BillingService;


===== src/Services/ClassEnrollmentService.ts =====
// src/lib/services/ClassEnrollmentService.ts

import { API_PATHS } from "@/constants/apiConstants";
import { IClassEnrollment } from "@/interfaces/IClassEnrollment";
import axios, { AxiosInstance } from "axios";
import { plainToInstance } from "class-transformer";
import { ClassEnrollment } from "@/models/ClassEnrollment";

class ClassEnrollmentService {
  private axiosInstance: AxiosInstance;

  constructor() {
    this.axiosInstance = axios.create({
      baseURL: API_PATHS.CLASS.ENROLLMENTS, // Adjust the API path accordingly
      headers: {
        "Content-Type": "application/json",
      },
    });
  }

  /**
   * Fetch all class enrollments with optional filters.
   * @param token 
   * @param params 
   * @returns IClassEnrollment[]
   */
  async getEnrollments(token: string, params?: Record<string, any>): Promise<IClassEnrollment[]> {
    const response = await this.axiosInstance.get<IClassEnrollment[]>(API_PATHS.CLASS.ENROLLMENTS, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
      params,
    });
    return response.data.map(enrollment => plainToInstance(ClassEnrollment, enrollment, { excludeExtraneousValues: true }));
  }

  /**
   * Create a new class enrollment.
   * @param token 
   * @param data 
   * @returns IClassEnrollment
   */
  async createEnrollment(token: string, data: Partial<IClassEnrollment>): Promise<IClassEnrollment> {
    const response = await this.axiosInstance.post<IClassEnrollment>(API_PATHS.CLASS.ENROLLMENTS, data, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return plainToInstance(ClassEnrollment, response.data, { excludeExtraneousValues: true });
  }

  /**
   * Update a class enrollment.
   * @param token 
   * @param enrollmentId 
   * @param data 
   * @returns IClassEnrollment
   */
  async updateEnrollment(token: string, enrollmentId: string, data: Partial<IClassEnrollment>): Promise<IClassEnrollment> {
    const response = await this.axiosInstance.put<IClassEnrollment>(`${API_PATHS.CLASS.ENROLLMENTS}/${enrollmentId}`, data, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return plainToInstance(ClassEnrollment, response.data, { excludeExtraneousValues: true });
  }

  /**
   * Delete a class enrollment.
   * @param token 
   * @param enrollmentId 
   */
  async deleteEnrollment(token: string, enrollmentId: string): Promise<void> {
    await this.axiosInstance.delete(`${API_PATHS.CLASS.ENROLLMENTS}/${enrollmentId}`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
  }
}

export default ClassEnrollmentService;


===== src/Services/StudentService.ts =====
// src/lib/services/StudentService.ts

import { API_PATHS } from "@/constants/apiConstants";
import { IStudent } from "@/interfaces/IStudent";
import axios, { AxiosInstance } from "axios";
import { plainToInstance } from "class-transformer";
import { Student } from "@/models/Student";

class StudentService {
  private axiosInstance: AxiosInstance;

  constructor() {
    this.axiosInstance = axios.create({
      baseURL: API_PATHS.STUDENT.GET_STUDENT, // Adjust the API path accordingly
      headers: {
        "Content-Type": "application/json",
      },
    });
  }

  /**
   * Fetch all students with optional filters.
   * @param token 
   * @param params 
   * @returns IStudent[]
   */
  async getStudents(token: string, params?: Record<string, any>): Promise<IStudent[]> {
    const response = await this.axiosInstance.get<IStudent[]>(API_PATHS.STUDENT.GET_STUDENT, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
      params,
    });
    return response.data.map(student => plainToInstance(Student, student, { excludeExtraneousValues: true }));
  }

  /**
   * Create a new student.
   * @param token 
   * @param data 
   * @returns IStudent
   */
  async createStudent(token: string, data: Partial<IStudent>): Promise<IStudent> {
    const response = await this.axiosInstance.post<IStudent>(API_PATHS.STUDENT.GET_STUDENT, data, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return plainToInstance(Student, response.data, { excludeExtraneousValues: true });
  }

  /**
   * Update a student.
   * @param token 
   * @param studentId 
   * @param data 
   * @returns IStudent
   */
  async updateStudent(token: string, studentId: string, data: Partial<IStudent>): Promise<IStudent> {
    const response = await this.axiosInstance.put<IStudent>(`${API_PATHS.STUDENT.GET_STUDENT}/${studentId}`, data, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return plainToInstance(Student, response.data, { excludeExtraneousValues: true });
  }

  /**
   * Delete a student.
   * @param token 
   * @param studentId 
   */
  async deleteStudent(token: string, studentId: string): Promise<void> {
    await this.axiosInstance.delete(`${API_PATHS.STUDENT.GET_STUDENT}/${studentId}`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
  }
}

export default StudentService;


===== src/Services/UserService.ts =====
// src/lib/services/UserService.ts

import { API_PATHS } from "@/constants/apiConstants";
import { IUser } from "@/interfaces/IUser";
import axios, { AxiosInstance } from "axios";
import { plainToInstance } from "class-transformer";
import { User } from "@/models/User";

class UserService {
  private axiosInstance: AxiosInstance;

  constructor() {
    this.axiosInstance = axios.create({
      baseURL: API_PATHS.USER.GET_USER,
      headers: {
        "Content-Type": "application/json",
      },
    });
  }

  /**
   * Fetch user data.
   * @param token 
   * @returns IUser
   */
  async getUser(token: string): Promise<IUser> {
    const response = await this.axiosInstance.get<IUser>(API_PATHS.USER.GET_USER, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return plainToInstance(User, response.data, { excludeExtraneousValues: true });
  }

  /**
   * Update user data.
   * @param token 
   * @param userId 
   * @param data 
   * @returns IUser
   */
  async updateUser(token: string, userId: string, data: Partial<IUser>): Promise<IUser> {
    const response = await this.axiosInstance.put<IUser>(`${API_PATHS.USER.GET_USER}/${userId}`, data, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return plainToInstance(User, response.data, { excludeExtraneousValues: true });
  }

  /**
   * Delete user.
   * @param token 
   * @param userId 
   */
  async deleteUser(token: string, userId: string): Promise<void> {
    await this.axiosInstance.delete(`${API_PATHS.USER.GET_USER}/${userId}`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
  }
}

export default UserService;


===== src/interfaces/IClassState.ts =====
import { IClass } from "./IClass";

export interface IClassState {
  classes: IClass[];
  isLoading: boolean;
  error: string | null;
}


===== src/repositories/BillingRepository.ts =====
// src/repositories/BillingRepository.ts

import { BaseRepository } from "./BaseRepository";
import { Billing } from "../models/Billing";

export class BillingRepository extends BaseRepository<Billing> {
  protected apiEndpoint = "/billings";
  protected modelClass = Billing;

  // Add any Billing-specific methods here if needed
}


===== src/repositories/ClassEnrollmentRepository.ts =====
// src/repositories/ClassEnrollmentRepository.ts

import { BaseRepository } from "./BaseRepository";
import { ClassEnrollment } from "../models/ClassEnrollment";

export class ClassEnrollmentRepository extends BaseRepository<ClassEnrollment> {
  protected apiEndpoint = "/enrollments";
  protected modelClass = ClassEnrollment;

  // Add any ClassEnrollment-specific methods here if needed
}


===== src/repositories/OrganizationRepository.ts =====
// src/repositories/OrganizationRepository.ts

import { BaseRepository } from "./BaseRepository";
import { Organization } from "../models/Organization";

export class OrganizationRepository extends BaseRepository<Organization> {
  protected apiEndpoint = "/organizations";
  protected modelClass = Organization;

  // Add any Organization-specific methods here if needed
}


===== src/repositories/StudentRepository.ts =====
// src/repositories/StudentRepository.ts

import { BaseRepository } from "./BaseRepository";
import { Student } from "../models/Student";

export class StudentRepository extends BaseRepository<Student> {
  protected apiEndpoint = "/students";
  protected modelClass = Student;

  // Add any Student-specific methods here if needed
}


===== src/repositories/TestRepository.ts =====
// src/repositories/TestRepository.ts

import { BaseRepository } from "./BaseRepository";
import { Test } from "../models/Test";

export class TestRepository extends BaseRepository<Test> {
  protected apiEndpoint = "/tests";
  protected modelClass = Test;

  // Add any Test-specific methods here if needed
}


===== src/repositories/UserRepository.ts =====
// src/repositories/UserRepository.ts

import { BaseRepository } from "./BaseRepository";
import { User } from "../models/User";

export class UserRepository extends BaseRepository<User> {
  protected apiEndpoint = "/users";
  protected modelClass = User;

  // Add any User-specific methods here if needed
}


